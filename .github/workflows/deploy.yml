name: Deploy to ECS

on:
  push:
    branches: [ dev, staging, production ]  # Exclude main branch
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: bagisto-app

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set environment based on branch
      id: set-env
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/production" ]]; then
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "ecs_cluster=bagisto-production-cluster" >> $GITHUB_OUTPUT
          echo "ecs_service=bagisto-production-service" >> $GITHUB_OUTPUT
          echo "queue_service=bagisto-production-queue-worker" >> $GITHUB_OUTPUT
          echo "scheduler_service=bagisto-production-scheduler" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "ecs_cluster=bagisto-staging-cluster" >> $GITHUB_OUTPUT
          echo "ecs_service=bagisto-staging-service" >> $GITHUB_OUTPUT
          echo "queue_service=bagisto-staging-queue-worker" >> $GITHUB_OUTPUT
          echo "scheduler_service=bagisto-staging-scheduler" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
          echo "environment=dev" >> $GITHUB_OUTPUT
          echo "ecs_cluster=bagisto-dev-cluster" >> $GITHUB_OUTPUT
          echo "ecs_service=bagisto-dev-service" >> $GITHUB_OUTPUT
          echo "queue_service=bagisto-dev-queue-worker" >> $GITHUB_OUTPUT
          echo "scheduler_service=bagisto-dev-scheduler" >> $GITHUB_OUTPUT
        fi

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.set-env.outputs.environment }}-${{ github.sha }}
        ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
      run: |
        # Build image with environment-specific tag
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$ENVIRONMENT-latest
        echo "Image built for $ENVIRONMENT: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Force ECS deployments for all services
      env:
        ENVIRONMENT: ${{ steps.set-env.outputs.environment }}
        ECS_CLUSTER: ${{ steps.set-env.outputs.ecs_cluster }}
        ECS_SERVICE: ${{ steps.set-env.outputs.ecs_service }}
        QUEUE_SERVICE: ${{ steps.set-env.outputs.queue_service }}
        SCHEDULER_SERVICE: ${{ steps.set-env.outputs.scheduler_service }}
      run: |
        echo "Deploying to $ENVIRONMENT environment..."
        
        # Update web service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION || echo "Web service not found in $ENVIRONMENT"
        
        # Update queue worker service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $QUEUE_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION || echo "Queue service not found in $ENVIRONMENT"
        
        # Update scheduler service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $SCHEDULER_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION || echo "Scheduler service not found in $ENVIRONMENT"
        
        echo "Deployment completed for $ENVIRONMENT environment!"
