name: Deploy to ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY_WEB: bagisto-app
  ECR_REPOSITORY_QUEUE: bagisto-queue
  ECR_REPOSITORY_SCHEDULER: bagisto-scheduler
  ECS_SERVICE: bagisto-staging-service
  ECS_CLUSTER: bagisto-staging-cluster

jobs:
  build-and-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and push Web App image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build web app image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_WEB:latest
        echo "Web image: $ECR_REGISTRY/$ECR_REPOSITORY_WEB:$IMAGE_TAG"

    - name: Build and push Queue Worker image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build queue worker image
        docker build -f Dockerfile.queue -t $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:latest
        echo "Queue image: $ECR_REGISTRY/$ECR_REPOSITORY_QUEUE:$IMAGE_TAG"

    - name: Build and push Scheduler image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build scheduler image
        docker build -f Dockerfile.scheduler -t $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:latest
        echo "Scheduler image: $ECR_REGISTRY/$ECR_REPOSITORY_SCHEDULER:$IMAGE_TAG"

    - name: Force ECS deployments
      run: |
        echo "Forcing ECS service deployments..."
        
        # Update web service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service $ECS_SERVICE \
          --force-new-deployment \
          --region $AWS_REGION
        
        # Update queue worker service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service bagisto-staging-queue-worker \
          --force-new-deployment \
          --region $AWS_REGION || echo "Queue service not found"
        
        # Update scheduler service
        aws ecs update-service \
          --cluster $ECS_CLUSTER \
          --service bagisto-staging-scheduler \
          --force-new-deployment \
          --region $AWS_REGION || echo "Scheduler service not found"
        
        echo "All ECS services updated!"
